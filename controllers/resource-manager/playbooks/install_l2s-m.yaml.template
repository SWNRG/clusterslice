---
- hosts: {@node_name@}
  gather_facts: no
  vars:
    admin_username: {@admin_username@}
    node_name: {@node_name@}
    node_ip: {@node_ip@}
    node_type: {@node_type@}
    app_name: {@app_name@}
    app_version: {@app_version@}
    app_waitforfile: {@app_waitforfile@}
    clusterslice_name: {@clusterslice_name@}
    ansible_shell_type: sh
    ansible_terminal_type: dumb
    tunnel_interface: eth0

  tasks:
     - name: set v2 in the case no version have been passed
       set_fact:
         app_version: "v2"
       when: app_version == "none"

     - name: download l2s-m git v1
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               git clone https://github.com/Networks-it-uc3m/L2S-M.git $HOME/'L2S-M'
               cd $HOME/'L2S-M'; git checkout v1
       when: app_version == "v1"

     - name: download l2s-m git v2
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               git clone https://github.com/Networks-it-uc3m/L2S-M.git $HOME/'L2S-M'
               # cd $HOME/'L2S-M'; git checkout v2
       when: app_version == "v2"  

     - name: upload l2s-m configuration scripts (v1)
       become: yes
       become_user: "{{ admin_username }}"
       ansible.builtin.copy:
         src: "{{ item }}"
         dest: "/home/{{ admin_username }}/"
       with_fileglob:
         - "l2sm/create_vxlan_file.sh"
       when: app_version == "v1"

     - name: upload l2s-m configuration scripts (v2)
       become: yes
       become_user: "{{ admin_username }}"
       ansible.builtin.copy:
         src: "{{ item }}"
         dest: "/home/{{ admin_username }}/"
       with_fileglob:
         - "l2sm/create_switch_config.sh"
         - "l2sm/configure_switches.sh"
       when: app_version == "v2"

     - name: create vxlan interfaces and veth pairs (v1)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               chmod +x $HOME/create_vxlan_file.sh
               $HOME/create_vxlan_file.sh {{ node_ip }} > $HOME/L2S-M/K8s/provision/vxlans.txt
               sudo sh $HOME/L2S-M/K8s/provision/set-interfaces.sh {{ tunnel_interface }} $HOME/L2S-M/K8s/provision/vxlans.txt
       when: app_version == "v1"

     - name: Add cron job to run set-interfaces.sh at reboot (v1)
       become: yes
       ansible.builtin.cron:
         name: "Configure Virtual Interfaces at Reboot"
         special_time: reboot
         job: "$HOME/L2S-M/K8s/provision/set-interfaces.sh {{ tunnel_interface }} $HOME/L2S-M/K8s/provision/vxlans.txt"
       when: app_version == "v1"

     - name: configure master node
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl taint nodes --all node-role.kubernetes.io/control-plane-
               kubectl taint nodes --all node-role.kubernetes.io/master-
               kubectl label nodes {{ node_name }} dedicated=master
       when: node_type == "mastervm" or node_type == "masternode"

     - name: create virtual interface definitions (v1)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/K8s/interfaces_definitions
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v1")

     - name: create virtual interface definitions (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/deployments/custom-installation/interfaces_definitions
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: create appropriate service account (v1)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/operator/deploy/config/
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v1")

     - name: create appropriate service account (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/deployments/config/
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: create persistent volume (v1)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/operator/deploy/mysql/
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v1")

     - name: create persistent volume (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/deployments/custom-installation/mysql/
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: deploy L2S-M controller (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/deployments/custom-installation/deployController.yaml
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: make sure controller pod is running (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               # remove completed pods
               KUBECONFIG=~/.kube/config kubectl delete pods --field-selector=status.phase==Succeeded
               # check status of remaining pods
               KUBECONFIG=~/.kube/config kubectl wait --for=condition=Ready pods --all
       register: controller_pod_ready
       until: controller_pod_ready is not failed
       retries: 50
       delay: 5
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: deploy L2S-M operator (v1)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/operator/deploy/deployOperator.yaml
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v1")

     - name: deploy L2S-M operator (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/deployments/custom-installation/deployOperator.yaml
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: make sure operator pod is running (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               # remove completed pods
               KUBECONFIG=~/.kube/config kubectl delete pods --field-selector=status.phase==Succeeded
               # check status of remaining pods
               KUBECONFIG=~/.kube/config kubectl wait --for=condition=Ready pods --all
       register: operator_pod_ready
       until: operator_pod_ready is not failed
       retries: 50
       delay: 5
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: deploy OVS daemonset (v1)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/operator/daemonset
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v1")

     - name: deploy OVS daemonset (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               kubectl create -f $HOME/L2S-M/deployments/custom-installation/deploySwitch.yaml
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: create switch_config.json and configure all switches (v2)
       become: yes
       become_user: "{{ admin_username }}"
       shell: |
               chmod +x $HOME/*.sh
               $HOME/create_switch_config.sh > $HOME/switch_config.json
               $HOME/configure_switches.sh
       register: switch_configuration_output
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")

     - name: Show switch configuration output
       debug: var=switch_configuration_output
       when: (node_type == "mastervm" or node_type == "masternode") and (app_version == "v2")
